// Code generated by go-bindata.
// sources:
// static/template.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5d\x8b\x9c\x30\x14\x7d\xf7\x57\x5c\xc2\xc2\xce\xd2\xc1\xb0\xaf\xdd\x28\x6c\x4b\x1f\xca\x40\x29\x6c\xf1\x3d\x9a\xbb\xab\x8c\x46\x89\xd7\xa1\x22\xfe\xf7\x62\xa2\xe3\xc7\xcc\xce\xb2\xf4\x2d\x37\x39\xe7\x9e\xdc\xe3\x31\x22\xa5\x22\x0f\x3d\x11\x97\xaa\x0d\x3d\xf1\x5a\x9a\x02\x0a\xa4\xb4\x54\x01\xab\xca\x9a\x58\xe8\x01\x00\x74\x9d\x91\xfa\x0d\xe1\xae\xc6\x84\xb2\x52\xc3\xd7\x00\xfc\x17\xb7\xae\xfb\xde\x62\x44\xfa\x18\x76\xdd\x84\xf0\x7f\xc9\x02\xfb\x5e\xf0\xf4\xd1\xb5\x10\x24\xe3\x1c\xdd\xda\xd5\x29\x4a\xb5\xac\xcd\x5c\x8c\x80\xf0\xb7\x34\xb2\x00\x2d\x0b\x14\x9c\xd2\xf7\xce\x4f\x32\x6f\x36\x00\xc1\x97\xed\x86\xb3\x8d\xd8\x30\x30\x64\x2a\x60\x17\x57\x66\x33\xec\x3c\xf6\x11\xdb\x3d\xdc\x59\x9d\x61\xf4\x33\x23\x1a\x76\x26\x03\xde\x99\x42\xad\x37\xec\x66\xa6\xab\x86\x80\xda\x0a\x03\x46\xf8\x97\x98\x9d\xf1\xca\x65\xf8\xb0\xcf\xdc\x84\xf6\xf8\x88\x6d\xdf\x33\xbe\x11\xe1\x5b\x95\xff\x95\xb5\x82\x4b\x5d\xbb\xfa\x48\x79\xed\x7a\xd7\xa1\x56\x4b\x6f\x38\xb9\x98\x8d\xc5\x9c\x07\x11\x37\x44\xa5\x1e\x6f\xe6\x0a\x06\xa5\x4e\xf2\x2c\x39\x06\x4c\x2a\xf5\xa7\xdc\xdd\x5f\xdc\xf2\xfe\x81\x85\xcf\x4a\x09\xee\x18\x53\x54\x67\xd5\x75\xdf\xba\x89\x8b\x8c\x58\xf8\x22\x4f\x38\x73\x04\x1f\x42\x1f\x7a\xa2\x4e\x4c\x56\x91\x6b\xf2\xda\x68\x97\x73\x27\x3d\xca\x3e\x40\x77\x1e\xe6\x24\x0d\xb8\x10\x05\xa0\xca\xa4\x29\x50\x93\xff\x86\xf4\x23\xc7\x61\xf9\xad\xfd\xa9\xce\xb4\xa7\x35\xcb\x2c\x29\x89\x41\x49\x38\xb2\x76\x8c\x0c\x7b\x78\xf2\xd6\x78\x75\xb8\x45\x50\x6c\xd3\xdf\x7e\xe4\x5b\x14\x0b\x58\xb2\x1c\xc3\xaf\x91\x9e\x89\x4c\x16\x37\x84\x3b\x36\x78\xc6\xf6\xe0\x72\xf2\x11\xd8\xa6\x74\x0f\xd3\xeb\xf0\x05\x98\x0b\xee\x82\x47\xea\xe0\xcb\xaa\x42\xad\xbe\xa7\x59\xae\x76\xae\xcf\x12\x60\x56\xe7\xa4\x0e\x97\x4e\x44\x9f\x77\xe2\x16\xe5\xba\x13\xd1\x67\x9c\xd8\x82\xaf\x38\xe1\xfe\xa5\x95\x15\xd1\xa5\x15\xd1\x2d\x2b\xa2\xa5\x15\x36\x76\x6b\x80\x19\xc9\xbd\x27\xf8\x94\x63\xc1\xc7\x47\x9d\xdb\x37\xfe\x5f\x00\x00\x00\xff\xff\xa6\xbd\xfa\x6d\xea\x05\x00\x00")

func staticTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplateHtml,
		"static/template.html",
	)
}

func staticTemplateHtml() (*asset, error) {
	bytes, err := staticTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/template.html", size: 1514, mode: os.FileMode(420), modTime: time.Unix(1498744462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/template.html": staticTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"template.html": &bintree{staticTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
